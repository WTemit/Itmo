--1.
--Таблицы: Н_ЛЮДИ, Н_СЕССИЯ.
--Вывести атрибуты: Н_ЛЮДИ.ИМЯ, Н_СЕССИЯ.УЧГОД.
--Фильтры (AND):
--a) Н_ЛЮДИ.ФАМИЛИЯ > Ёлкин.
--b) Н_СЕССИЯ.ИД < 14.
--c) Н_СЕССИЯ.ИД = 32199.
--Вид соединения: RIGHT JOIN.

SELECT
    T1.ИМЯ AS ИМЯ_ЛЮДИ,
    T3.УЧГОД AS УЧГОД_СЕССИЯ
FROM
    Н_ЛЮДИ AS T1
RIGHT JOIN
    Н_ВЕДОМОСТИ AS T2 ON T1.ИД = T2.ЧЛВК_ИД
RIGHT JOIN
    Н_СЕССИЯ AS T3 ON T2.СЭС_ИД = T3.ИД
WHERE
    T1.ФАМИЛИЯ > 'Ёлкин'
    AND T3.ИД < 14
    AND T3.ИД = 32199;
	
--2.
--Сделать запрос для получения атрибутов из указанных таблиц, применив фильтры по указанным условиям:
--Таблицы: Н_ЛЮДИ, Н_ВЕДОМОСТИ, Н_СЕССИЯ.
--Вывести атрибуты: Н_ЛЮДИ.ИМЯ, Н_ВЕДОМОСТИ.ЧЛВК_ИД, Н_СЕССИЯ.УЧГОД.
--Фильтры (AND):
--a) Н_ЛЮДИ.ИД > 152862.
--b) Н_ВЕДОМОСТИ.ДАТА < 2010-06-18.
--Вид соединения: LEFT JOIN.

SELECT
    T1.ИМЯ,
    T1.ИД AS ИД_ЧЕЛОВЕКА,
    STRING_AGG(DISTINCT T3.УЧГОД::TEXT, ', ' ORDER BY T3.УЧГОД::TEXT) AS Связанные_Учебные_Года
FROM
    Н_ЛЮДИ AS T1
LEFT JOIN
    Н_ВЕДОМОСТИ AS T2 ON T1.ИД = T2.ЧЛВК_ИД AND T2.ДАТА < '2010-06-18'
LEFT JOIN
    Н_СЕССИЯ AS T3 ON T2.СЭС_ИД = T3.СЭС_ИД
WHERE
    T1.ИД > 152862
    AND T3.УЧГОД IS NOT NULL
GROUP BY
    T1.ИД, T1.ИМЯ
ORDER BY
    T1.ИД;
	
--3.
--Вывести число студентов вечерней формы обучения, которые младше 20 лет.
--Ответ должен содержать только одно число.

SELECT
    COUNT(DISTINCT T1.ИД)
FROM
    Н_ЛЮДИ AS T1
JOIN
    Н_УЧЕНИКИ AS T2 ON T1.ИД = T2.ЧЛВК_ИД
JOIN
    Н_ПЛАНЫ AS T3 ON T2.ПЛАН_ИД = T3.ИД
JOIN
    Н_ФОРМЫ_ОБУЧЕНИЯ AS T4 ON T3.ФО_ИД = T4.ИД
WHERE
    T4.НАИМЕНОВАНИЕ = 'Очно-заочная(вечерняя)'
    AND T1.ДАТА_РОЖДЕНИЯ IS NOT NULL 
    AND T1.ДАТА_РОЖДЕНИЯ > (current_date - INTERVAL '20 years');
	
--4.
--В таблице Н_ГРУППЫ_ПЛАНОВ найти номера планов, по которым обучается (обучалось) менее 2 групп на кафедре вычислительной техники.
--Для реализации использовать соединение таблиц.

SELECT
    T1.НОМЕР
FROM
    Н_ПЛАНЫ AS T1
JOIN
    Н_НАПР_СПЕЦ AS T2 ON T1.НАПС_ИД = T2.ИД 
LEFT JOIN
    Н_ГРУППЫ_ПЛАНОВ AS T3 ON T1.ИД = T3.ПЛАН_ИД
WHERE
    T2.НАИМЕНОВАНИЕ = 'ИНФОРМАТИКА И ВЫЧИСЛИТЕЛЬНАЯ ТЕХНИКА';
GROUP BY
    T1.НОМЕР
HAVING
    COUNT(T3.ГРУППА) < 2;
	
--5.
--Выведите таблицу со средними оценками студентов группы 4100 (Номер, ФИО, Ср_оценка), у которых средняя оценка равна минимальной оценк(е|и) в группе 1100.

SELECT
    T1.ИД AS Номер,
    T1.ФАМИЛИЯ || ' ' || T1.ИМЯ || ' ' || T1.ОТЧЕСТВО AS ФИО, -- Объединение ФИО
    AVG(CAST(T4.КОД AS NUMERIC)) AS Ср_оценка -- Вычисление средней оценки
FROM
    Н_ЛЮДИ AS T1
JOIN
    Н_УЧЕНИКИ AS T2 ON T1.ИД = T2.ЧЛВК_ИД -- Связь с таблицей студентов для фильтра по группе
JOIN
    Н_ВЕДОМОСТИ AS T3 ON T1.ИД = T3.ЧЛВК_ИД -- Связь с ведомостями студента
JOIN
    Н_ОЦЕНКИ AS T4 ON T3.ОЦЕНКА = T4.КОД
WHERE
    T2.ГРУППА = '4100' -- Фильтр для студентов группы 4100
    AND T4.КОД IS NOT NULL -- Исключить оценки NULL
    AND T4.КОД ~ '^[0-9]+$' -- Дополнительная проверка, что код оценки числовой (для CAST)
GROUP BY
    T1.ИД, T1.ФАМИЛИЯ, T1.ИМЯ, T1.ОТЧЕСТВО -- Группировка по студенту для вычисления его средней оценки
HAVING
    AVG(CAST(T4.КОД AS NUMERIC)) = ( -- Фильтр: средняя оценка студента равна минимальной средней оценке в группе 1100
        SELECT
            MIN(AvgGrade) -- Минимальная из средних оценок в группе 1100
        FROM (
            SELECT
                AVG(CAST(T4_sub.КОД AS NUMERIC)) AS AvgGrade -- Средняя оценка для каждого студента в группе 1100
            FROM
                Н_ЛЮДИ AS T1_sub
            JOIN
                Н_УЧЕНИКИ AS T2_sub ON T1_sub.ИД = T2_sub.ЧЛВК_ИД
            JOIN
                Н_ВЕДОМОСТИ AS T3_sub ON T1_sub.ИД = T3_sub.ЧЛВК_ИД
            JOIN
                Н_ОЦЕНКИ AS T4_sub ON T3_sub.ОЦЕНКА = T4_sub.КОД
            WHERE
                T2_sub.ГРУППА = '1100' -- Фильтр для студентов группы 1100
                AND T4_sub.КОД IS NOT NULL
                 AND T4_sub.КОД ~ '^[0-9]+$' -- Дополнительная проверка
            GROUP BY
                T1_sub.ИД -- Группировка по студенту в подзапросе
        ) AS MinAvg1100
    );
	
--6.
--Получить список студентов, зачисленных после первого сентября 2012 года на первый курс заочной формы обучения (специальность: Программная инженерия). В результат включить:
--номер группы;
--номер, фамилию, имя и отчество студента;
--номер и состояние пункта приказа;
--Для реализации использовать подзапрос с EXISTS.

SELECT
    T2.ГРУППА AS Номер_группы,
    T1.ИД AS Номер_студента,
    T1.ФАМИЛИЯ,
    T1.ИМЯ,
    T1.ОТЧЕСТВО,
    T2.П_ПРКОК_ИД AS Номер_пункта_приказа,
    T2.СОСТОЯНИЕ AS Состояние_студента -- Используем состояние студента из Н_УЧЕНИКИ
FROM
    Н_ЛЮДИ AS T1
JOIN
    Н_УЧЕНИКИ AS T2 ON T1.ИД = T2.ЧЛВК_ИД -- Связываемся с Н_УЧЕНИКИ, чтобы получить данные о зачислении, группе и приказе
WHERE EXISTS ( -- Проверяем наличие соответствующей записи в академических таблицах
    SELECT 1
    FROM
        Н_УЧЕНИКИ AS T2_sub -- Внутренний алиас для корреляции
    JOIN
        Н_ПЛАНЫ AS T3_sub ON T2_sub.ПЛАН_ИД = T3_sub.ИД -- Связь с планом
    JOIN
        Н_НАПР_СПЕЦ AS T4_sub ON T3_sub.НАПС_ИД = T4_sub.ИД -- Связь со специальностью
    JOIN
        Н_ФОРМЫ_ОБУЧЕНИЯ AS T5_sub ON T3_sub.ФО_ИД = T5_sub.ИД -- Связь с формой обучения
    WHERE
        T2_sub.ЧЛВК_ИД = T1.ИД -- Корреляция с внешним запросом (проверяем для текущего студента)
        AND T2_sub.НАЧАЛО > '2012-09-01' -- Фильтр по дате зачисления
        AND T3_sub.КУРС = 1 -- Фильтр по курсу
        AND T5_sub.НАИМЕНОВАНИЕ = 'заочная форма обучения' -- Фильтр по форме обучения (точное название может отличаться)
        AND T4_sub.НАИМЕНОВАНИЕ = 'Программная инженерия' -- Фильтр по специальности (точное название может отличаться)
);

--7.
--Сформировать запрос для получения числа в СПбГУ ИТМО отличников.

SELECT
    COUNT(*) -- Считаем общее количество строк из внутреннего запроса
FROM (
    -- Внутренний запрос: находит ID всех студентов, чья средняя оценка равна 5.0
    SELECT
        T1.ИД -- Выбираем ID студента
    FROM
        Н_ЛЮДИ AS T1
    JOIN
        Н_УЧЕНИКИ AS T2 ON T1.ИД = T2.ЧЛВК_ИД -- Убеждаемся, что это студент
    JOIN
        Н_ВЕДОМОСТИ AS T3 ON T1.ИД = T3.ЧЛВК_ИД -- Связь с ведомостями студента
    JOIN
        Н_ОЦЕНКИ AS T4 ON T3.ОЦЕНКА = T4.КОД -- Используем исправленное условие связи из предыдущего шага
    WHERE
        T4.КОД IS NOT NULL -- Исключить оценки NULL
        AND T4.КОД ~ '^[0-9]+$' -- Убедиться, что код оценки числовой
    GROUP BY
        T1.ИД -- Группируем по студенту для вычисления среднего балла
    HAVING
        AVG(CAST(T4.КОД AS NUMERIC)) = 5.0 -- Отбираем студентов, у которых средний балл равен 5.0
) AS ExcellentStudents; 